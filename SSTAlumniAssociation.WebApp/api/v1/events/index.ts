/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { createEventFromDiscriminatorValue, createListEventsResponseFromDiscriminatorValue, createStatusFromDiscriminatorValue, serializeEvent, type Event, type ListEventsResponse, type Status } from '../../models/index.js';
// @ts-ignore
import { EventsItemRequestBuilderNavigationMetadata, EventsItemRequestBuilderRequestsMetadata, type EventsItemRequestBuilder } from './item/index.js';
// @ts-ignore
import { type BaseRequestBuilder, type KeysToExcludeForNavigationMetadata, type NavigationMetadata, type Parsable, type ParsableFactory, type RequestConfiguration, type RequestInformation, type RequestsMetadata } from '@microsoft/kiota-abstractions';

/**
 * Builds and executes requests for operations under /v1/events
 */
export interface EventsRequestBuilder extends BaseRequestBuilder<EventsRequestBuilder> {
    /**
     * Gets an item from the ApiSdk.v1.events.item collection
     * @param id Unique identifier of the item
     * @returns {EventsItemRequestBuilder}
     */
     byId(id: string) : EventsItemRequestBuilder;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<ListEventsResponse>}
     * @throws {Status} error when the service returns a 4XX or 5XX status code
     */
     get(requestConfiguration?: RequestConfiguration<EventsRequestBuilderGetQueryParameters> | undefined) : Promise<ListEventsResponse | undefined>;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {Promise<Event>}
     * @throws {Status} error when the service returns a 4XX or 5XX status code
     */
     post(body: Event, requestConfiguration?: RequestConfiguration<object> | undefined) : Promise<Event | undefined>;
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toGetRequestInformation(requestConfiguration?: RequestConfiguration<EventsRequestBuilderGetQueryParameters> | undefined) : RequestInformation;
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns {RequestInformation}
     */
     toPostRequestInformation(body: Event, requestConfiguration?: RequestConfiguration<object> | undefined) : RequestInformation;
}
export interface EventsRequestBuilderGetQueryParameters {
    pageSize?: number;
    pageToken?: string;
}
/**
 * Uri template for the request builder.
 */
export const EventsRequestBuilderUriTemplate = "{+baseurl}/v1/events{?pageSize*,pageToken*}";
/**
 * Metadata for all the navigation properties in the request builder.
 */
export const EventsRequestBuilderNavigationMetadata: Record<Exclude<keyof EventsRequestBuilder, KeysToExcludeForNavigationMetadata>, NavigationMetadata> = {
    byId: {
        requestsMetadata: EventsItemRequestBuilderRequestsMetadata,
        navigationMetadata: EventsItemRequestBuilderNavigationMetadata,
        pathParametersMappings: ["id"],
    },
};
/**
 * Metadata for all the requests in the request builder.
 */
export const EventsRequestBuilderRequestsMetadata: RequestsMetadata = {
    get: {
        uriTemplate: EventsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createStatusFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createListEventsResponseFromDiscriminatorValue,
    },
    post: {
        uriTemplate: EventsRequestBuilderUriTemplate,
        responseBodyContentType: "application/json",
        errorMappings: {
            XXX: createStatusFromDiscriminatorValue as ParsableFactory<Parsable>,
        },
        adapterMethodName: "send",
        responseBodyFactory:  createEventFromDiscriminatorValue,
        requestBodyContentType: "application/json",
        requestBodySerializer: serializeEvent,
        requestInformationContentSetMethod: "setContentFromParsable",
    },
};
/* tslint:enable */
/* eslint-enable */
