/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
// @ts-ignore
import { type AdditionalDataHolder, type ApiError, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export interface AlumniMember extends Parsable {
    /**
     * If a member is an associate and have never graduated from SST, this field will be empty.
     */
    graduationYear?: number | null;
}
export interface Any extends AdditionalDataHolder, Parsable {
    /**
     * Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
     */
    additionalData?: Record<string, unknown>;
    /**
     * The Type property
     */
    type?: string | null;
}
export interface Article extends Parsable {
    /**
     * The ctaTitle property
     */
    ctaTitle?: string | null;
    /**
     * The ctaUrl property
     */
    ctaUrl?: string | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The heroImageAlt property
     */
    heroImageAlt?: string | null;
    /**
     * The heroImageUrl property
     */
    heroImageUrl?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The title property
     */
    title?: string | null;
}
export interface Attendee extends Parsable {
    /**
     * The admissionKey property
     */
    admissionKey?: string | null;
    /**
     * The event property
     */
    event?: EventSimple | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The user property
     */
    user?: User | null;
}
export interface AttendeeSimple extends Parsable {
    /**
     * The admissionKey property
     */
    admissionKey?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The user property
     */
    user?: User | null;
}
export interface BatchCreateUsersRequest extends Parsable {
    /**
     * The requests property
     */
    requests?: CreateUserRequest[] | null;
}
export interface BatchCreateUsersResponse extends Parsable {
    /**
     * The users property
     */
    users?: User[] | null;
}
export interface CheckIn extends Parsable {
    /**
     * The checkInDateTime property
     */
    checkInDateTime?: string | null;
    /**
     * The checkOutDateTime property
     */
    checkOutDateTime?: string | null;
    /**
     * The guest property
     */
    guest?: GuestCheckIn | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The user property
     */
    user?: User | null;
}
/**
 * CheckIn with no navigations
 */
export interface CheckInSimple extends Parsable {
    /**
     * The guest property
     */
    guest?: GuestCheckIn | null;
    /**
     * The user property
     */
    user?: string | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AlumniMember}
 */
// @ts-ignore
export function createAlumniMemberFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAlumniMember;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Any}
 */
// @ts-ignore
export function createAnyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAny;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Article}
 */
// @ts-ignore
export function createArticleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoArticle;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Attendee}
 */
// @ts-ignore
export function createAttendeeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAttendee;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {AttendeeSimple}
 */
// @ts-ignore
export function createAttendeeSimpleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoAttendeeSimple;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BatchCreateUsersRequest}
 */
// @ts-ignore
export function createBatchCreateUsersRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBatchCreateUsersRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {BatchCreateUsersResponse}
 */
// @ts-ignore
export function createBatchCreateUsersResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoBatchCreateUsersResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CheckIn}
 */
// @ts-ignore
export function createCheckInFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCheckIn;
}
export interface CreateCheckInRequest extends Parsable {
    /**
     * CheckIn with no navigations
     */
    checkIn?: CheckInSimple | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CheckInSimple}
 */
// @ts-ignore
export function createCheckInSimpleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCheckInSimple;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateCheckInRequest}
 */
// @ts-ignore
export function createCreateCheckInRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateCheckInRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {CreateUserRequest}
 */
// @ts-ignore
export function createCreateUserRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoCreateUserRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Employee}
 */
// @ts-ignore
export function createEmployeeFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEmployee;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EmployeeMember}
 */
// @ts-ignore
export function createEmployeeMemberFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEmployeeMember;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Empty}
 */
// @ts-ignore
export function createEmptyFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEmpty;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Event}
 */
// @ts-ignore
export function createEventFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEvent;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {EventSimple}
 */
// @ts-ignore
export function createEventSimpleFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoEventSimple;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {GuestCheckIn}
 */
// @ts-ignore
export function createGuestCheckInFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoGuestCheckIn;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListArticlesRequest}
 */
// @ts-ignore
export function createListArticlesRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListArticlesRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListArticlesResponse}
 */
// @ts-ignore
export function createListArticlesResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListArticlesResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListCheckInsResponse}
 */
// @ts-ignore
export function createListCheckInsResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListCheckInsResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListEventsResponse}
 */
// @ts-ignore
export function createListEventsResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListEventsResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ListUsersResponse}
 */
// @ts-ignore
export function createListUsersResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoListUsersResponse;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Member}
 */
// @ts-ignore
export function createMemberFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoMember;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {ServiceAccount}
 */
// @ts-ignore
export function createServiceAccountFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoServiceAccount;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {Status}
 */
// @ts-ignore
export function createStatusFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoStatus;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {SystemAdmin}
 */
// @ts-ignore
export function createSystemAdminFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoSystemAdmin;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateEventRequest}
 */
// @ts-ignore
export function createUpdateEventRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateEventRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {UpdateUserRequest}
 */
// @ts-ignore
export function createUpdateUserRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUpdateUserRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {User}
 */
// @ts-ignore
export function createUserFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoUser;
}
export interface CreateUserRequest extends Parsable {
    /**
     * The user property
     */
    user?: User | null;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VerifyUserRequest}
 */
// @ts-ignore
export function createVerifyUserRequestFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVerifyUserRequest;
}
/**
 * Creates a new instance of the appropriate class based on discriminator value
 * @param parseNode The parse node to use to read the discriminator value and create the object
 * @returns {VerifyUserResponse}
 */
// @ts-ignore
export function createVerifyUserResponseFromDiscriminatorValue(parseNode: ParseNode | undefined) : ((instance?: Parsable) => Record<string, (node: ParseNode) => void>) {
    return deserializeIntoVerifyUserResponse;
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAlumniMember(alumniMember: Partial<AlumniMember> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "graduationYear": n => { alumniMember.graduationYear = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAny(any: Partial<Any> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "@type": n => { any.type = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoArticle(article: Partial<Article> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "ctaTitle": n => { article.ctaTitle = n.getStringValue(); },
        "ctaUrl": n => { article.ctaUrl = n.getStringValue(); },
        "description": n => { article.description = n.getStringValue(); },
        "heroImageAlt": n => { article.heroImageAlt = n.getStringValue(); },
        "heroImageUrl": n => { article.heroImageUrl = n.getStringValue(); },
        "id": n => { article.id = n.getStringValue(); },
        "title": n => { article.title = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAttendee(attendee: Partial<Attendee> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "admissionKey": n => { attendee.admissionKey = n.getStringValue(); },
        "event": n => { attendee.event = n.getObjectValue<EventSimple>(createEventSimpleFromDiscriminatorValue); },
        "id": n => { attendee.id = n.getStringValue(); },
        "user": n => { attendee.user = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoAttendeeSimple(attendeeSimple: Partial<AttendeeSimple> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "admissionKey": n => { attendeeSimple.admissionKey = n.getStringValue(); },
        "id": n => { attendeeSimple.id = n.getStringValue(); },
        "user": n => { attendeeSimple.user = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBatchCreateUsersRequest(batchCreateUsersRequest: Partial<BatchCreateUsersRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "requests": n => { batchCreateUsersRequest.requests = n.getCollectionOfObjectValues<CreateUserRequest>(createCreateUserRequestFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoBatchCreateUsersResponse(batchCreateUsersResponse: Partial<BatchCreateUsersResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "users": n => { batchCreateUsersResponse.users = n.getCollectionOfObjectValues<User>(createUserFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCheckIn(checkIn: Partial<CheckIn> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "checkInDateTime": n => { checkIn.checkInDateTime = n.getStringValue(); },
        "checkOutDateTime": n => { checkIn.checkOutDateTime = n.getStringValue(); },
        "guest": n => { checkIn.guest = n.getObjectValue<GuestCheckIn>(createGuestCheckInFromDiscriminatorValue); },
        "id": n => { checkIn.id = n.getStringValue(); },
        "user": n => { checkIn.user = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCheckInSimple(checkInSimple: Partial<CheckInSimple> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "guest": n => { checkInSimple.guest = n.getObjectValue<GuestCheckIn>(createGuestCheckInFromDiscriminatorValue); },
        "user": n => { checkInSimple.user = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateCheckInRequest(createCheckInRequest: Partial<CreateCheckInRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "checkIn": n => { createCheckInRequest.checkIn = n.getObjectValue<CheckInSimple>(createCheckInSimpleFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoCreateUserRequest(createUserRequest: Partial<CreateUserRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "user": n => { createUserRequest.user = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEmployee(employee: Partial<Employee> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEmployeeMember(employeeMember: Partial<EmployeeMember> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "graduationYear": n => { employeeMember.graduationYear = n.getNumberValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEmpty(empty: Partial<Empty> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEvent(event: Partial<Event> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "active": n => { event.active = n.getBooleanValue(); },
        "attendees": n => { event.attendees = n.getCollectionOfObjectValues<AttendeeSimple>(createAttendeeSimpleFromDiscriminatorValue); },
        "badgeImage": n => { event.badgeImage = n.getStringValue(); },
        "description": n => { event.description = n.getStringValue(); },
        "endDateTime": n => { event.endDateTime = n.getStringValue(); },
        "id": n => { event.id = n.getStringValue(); },
        "location": n => { event.location = n.getStringValue(); },
        "name": n => { event.name = n.getStringValue(); },
        "startDateTime": n => { event.startDateTime = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoEventSimple(eventSimple: Partial<EventSimple> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "active": n => { eventSimple.active = n.getBooleanValue(); },
        "badgeImage": n => { eventSimple.badgeImage = n.getStringValue(); },
        "description": n => { eventSimple.description = n.getStringValue(); },
        "endDateTime": n => { eventSimple.endDateTime = n.getStringValue(); },
        "id": n => { eventSimple.id = n.getStringValue(); },
        "location": n => { eventSimple.location = n.getStringValue(); },
        "name": n => { eventSimple.name = n.getStringValue(); },
        "startDateTime": n => { eventSimple.startDateTime = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoGuestCheckIn(guestCheckIn: Partial<GuestCheckIn> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "name": n => { guestCheckIn.name = n.getStringValue(); },
        "nric": n => { guestCheckIn.nric = n.getStringValue(); },
        "phone": n => { guestCheckIn.phone = n.getStringValue(); },
        "reason": n => { guestCheckIn.reason = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListArticlesRequest(listArticlesRequest: Partial<ListArticlesRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "pageSize": n => { listArticlesRequest.pageSize = n.getNumberValue(); },
        "pageToken": n => { listArticlesRequest.pageToken = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListArticlesResponse(listArticlesResponse: Partial<ListArticlesResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "articles": n => { listArticlesResponse.articles = n.getCollectionOfObjectValues<Article>(createArticleFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListCheckInsResponse(listCheckInsResponse: Partial<ListCheckInsResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "checkIns": n => { listCheckInsResponse.checkIns = n.getCollectionOfObjectValues<CheckIn>(createCheckInFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListEventsResponse(listEventsResponse: Partial<ListEventsResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "events": n => { listEventsResponse.events = n.getCollectionOfObjectValues<EventSimple>(createEventSimpleFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoListUsersResponse(listUsersResponse: Partial<ListUsersResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "users": n => { listUsersResponse.users = n.getCollectionOfObjectValues<User>(createUserFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoMember(member: Partial<Member> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "alumniMember": n => { member.alumniMember = n.getObjectValue<AlumniMember>(createAlumniMemberFromDiscriminatorValue); },
        "employeeMember": n => { member.employeeMember = n.getObjectValue<EmployeeMember>(createEmployeeMemberFromDiscriminatorValue); },
        "memberId": n => { member.memberId = n.getStringValue(); },
        "membership": n => { member.membership = n.getEnumValue<Membership>(MembershipObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoServiceAccount(serviceAccount: Partial<ServiceAccount> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "serviceAccountType": n => { serviceAccount.serviceAccountType = n.getEnumValue<ServiceAccountType>(ServiceAccountTypeObject); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoStatus(status: Partial<Status> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "code": n => { status.code = n.getNumberValue(); },
        "details": n => { status.details = n.getCollectionOfObjectValues<Any>(createAnyFromDiscriminatorValue); },
        "message": n => { status.messageEscaped = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoSystemAdmin(systemAdmin: Partial<SystemAdmin> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateEventRequest(updateEventRequest: Partial<UpdateEventRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "event": n => { updateEventRequest.event = n.getObjectValue<EventSimple>(createEventSimpleFromDiscriminatorValue); },
        "id": n => { updateEventRequest.id = n.getStringValue(); },
        "updateMask": n => { updateEventRequest.updateMask = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUpdateUserRequest(updateUserRequest: Partial<UpdateUserRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { updateUserRequest.id = n.getStringValue(); },
        "updateMask": n => { updateUserRequest.updateMask = n.getStringValue(); },
        "user": n => { updateUserRequest.user = n.getObjectValue<User>(createUserFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoUser(user: Partial<User> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { user.email = n.getStringValue(); },
        "employee": n => { user.employee = n.getObjectValue<Employee>(createEmployeeFromDiscriminatorValue); },
        "firebaseId": n => { user.firebaseId = n.getStringValue(); },
        "id": n => { user.id = n.getStringValue(); },
        "member": n => { user.member = n.getObjectValue<Member>(createMemberFromDiscriminatorValue); },
        "name": n => { user.name = n.getStringValue(); },
        "serviceAccount": n => { user.serviceAccount = n.getObjectValue<ServiceAccount>(createServiceAccountFromDiscriminatorValue); },
        "systemAdmin": n => { user.systemAdmin = n.getObjectValue<SystemAdmin>(createSystemAdminFromDiscriminatorValue); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVerifyUserRequest(verifyUserRequest: Partial<VerifyUserRequest> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "email": n => { verifyUserRequest.email = n.getStringValue(); },
    }
}
/**
 * The deserialization information for the current model
 * @returns {Record<string, (node: ParseNode) => void>}
 */
// @ts-ignore
export function deserializeIntoVerifyUserResponse(verifyUserResponse: Partial<VerifyUserResponse> | undefined = {}) : Record<string, (node: ParseNode) => void> {
    return {
        "id": n => { verifyUserResponse.id = n.getStringValue(); },
        "linked": n => { verifyUserResponse.linked = n.getBooleanValue(); },
    }
}
export interface Employee extends Parsable {
}
export interface EmployeeMember extends Parsable {
    /**
     * If a member was an ex-student of SST, this field will contain their graduation year.
     */
    graduationYear?: number | null;
}
export interface Empty extends Parsable {
}
export interface Event extends Parsable {
    /**
     * The active property
     */
    active?: boolean | null;
    /**
     * The attendees property
     */
    attendees?: AttendeeSimple[] | null;
    /**
     * The badgeImage property
     */
    badgeImage?: string | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The endDateTime property
     */
    endDateTime?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The location property
     */
    location?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The startDateTime property
     */
    startDateTime?: string | null;
}
export interface EventSimple extends Parsable {
    /**
     * The active property
     */
    active?: boolean | null;
    /**
     * The badgeImage property
     */
    badgeImage?: string | null;
    /**
     * The description property
     */
    description?: string | null;
    /**
     * The endDateTime property
     */
    endDateTime?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The location property
     */
    location?: string | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The startDateTime property
     */
    startDateTime?: string | null;
}
export interface GuestCheckIn extends Parsable {
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The nric property
     */
    nric?: string | null;
    /**
     * The phone property
     */
    phone?: string | null;
    /**
     * The reason property
     */
    reason?: string | null;
}
export interface ListArticlesRequest extends Parsable {
    /**
     * The pageSize property
     */
    pageSize?: number | null;
    /**
     * The pageToken property
     */
    pageToken?: string | null;
}
export interface ListArticlesResponse extends Parsable {
    /**
     * The articles property
     */
    articles?: Article[] | null;
}
export interface ListCheckInsResponse extends Parsable {
    /**
     * The checkIns property
     */
    checkIns?: CheckIn[] | null;
}
export interface ListEventsResponse extends Parsable {
    /**
     * The events property
     */
    events?: EventSimple[] | null;
}
export interface ListUsersResponse extends Parsable {
    /**
     * The users property
     */
    users?: User[] | null;
}
export interface Member extends Parsable {
    /**
     * The alumniMember property
     */
    alumniMember?: AlumniMember | null;
    /**
     * The employeeMember property
     */
    employeeMember?: EmployeeMember | null;
    /**
     * The memberId property
     */
    memberId?: string | null;
    /**
     * The membership property
     */
    membership?: Membership | null;
}
export type Membership = (typeof MembershipObject)[keyof typeof MembershipObject];
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAlumniMember(writer: SerializationWriter, alumniMember: Partial<AlumniMember> | undefined | null = {}) : void {
    if (alumniMember) {
        writer.writeNumberValue("graduationYear", alumniMember.graduationYear);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAny(writer: SerializationWriter, any: Partial<Any> | undefined | null = {}) : void {
    if (any) {
        writer.writeStringValue("@type", any.type);
        writer.writeAdditionalData(any.additionalData);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeArticle(writer: SerializationWriter, article: Partial<Article> | undefined | null = {}) : void {
    if (article) {
        writer.writeStringValue("ctaTitle", article.ctaTitle);
        writer.writeStringValue("ctaUrl", article.ctaUrl);
        writer.writeStringValue("description", article.description);
        writer.writeStringValue("heroImageAlt", article.heroImageAlt);
        writer.writeStringValue("heroImageUrl", article.heroImageUrl);
        writer.writeStringValue("id", article.id);
        writer.writeStringValue("title", article.title);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAttendee(writer: SerializationWriter, attendee: Partial<Attendee> | undefined | null = {}) : void {
    if (attendee) {
        writer.writeStringValue("admissionKey", attendee.admissionKey);
        writer.writeObjectValue<EventSimple>("event", attendee.event, serializeEventSimple);
        writer.writeStringValue("id", attendee.id);
        writer.writeObjectValue<User>("user", attendee.user, serializeUser);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeAttendeeSimple(writer: SerializationWriter, attendeeSimple: Partial<AttendeeSimple> | undefined | null = {}) : void {
    if (attendeeSimple) {
        writer.writeStringValue("admissionKey", attendeeSimple.admissionKey);
        writer.writeStringValue("id", attendeeSimple.id);
        writer.writeObjectValue<User>("user", attendeeSimple.user, serializeUser);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBatchCreateUsersRequest(writer: SerializationWriter, batchCreateUsersRequest: Partial<BatchCreateUsersRequest> | undefined | null = {}) : void {
    if (batchCreateUsersRequest) {
        writer.writeCollectionOfObjectValues<CreateUserRequest>("requests", batchCreateUsersRequest.requests, serializeCreateUserRequest);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeBatchCreateUsersResponse(writer: SerializationWriter, batchCreateUsersResponse: Partial<BatchCreateUsersResponse> | undefined | null = {}) : void {
    if (batchCreateUsersResponse) {
        writer.writeCollectionOfObjectValues<User>("users", batchCreateUsersResponse.users, serializeUser);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCheckIn(writer: SerializationWriter, checkIn: Partial<CheckIn> | undefined | null = {}) : void {
    if (checkIn) {
        writer.writeStringValue("checkInDateTime", checkIn.checkInDateTime);
        writer.writeStringValue("checkOutDateTime", checkIn.checkOutDateTime);
        writer.writeObjectValue<GuestCheckIn>("guest", checkIn.guest, serializeGuestCheckIn);
        writer.writeStringValue("id", checkIn.id);
        writer.writeObjectValue<User>("user", checkIn.user, serializeUser);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCheckInSimple(writer: SerializationWriter, checkInSimple: Partial<CheckInSimple> | undefined | null = {}) : void {
    if (checkInSimple) {
        writer.writeObjectValue<GuestCheckIn>("guest", checkInSimple.guest, serializeGuestCheckIn);
        writer.writeStringValue("user", checkInSimple.user);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateCheckInRequest(writer: SerializationWriter, createCheckInRequest: Partial<CreateCheckInRequest> | undefined | null = {}) : void {
    if (createCheckInRequest) {
        writer.writeObjectValue<CheckInSimple>("checkIn", createCheckInRequest.checkIn, serializeCheckInSimple);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeCreateUserRequest(writer: SerializationWriter, createUserRequest: Partial<CreateUserRequest> | undefined | null = {}) : void {
    if (createUserRequest) {
        writer.writeObjectValue<User>("user", createUserRequest.user, serializeUser);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEmployee(writer: SerializationWriter, employee: Partial<Employee> | undefined | null = {}) : void {
    if (employee) {
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEmployeeMember(writer: SerializationWriter, employeeMember: Partial<EmployeeMember> | undefined | null = {}) : void {
    if (employeeMember) {
        writer.writeNumberValue("graduationYear", employeeMember.graduationYear);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEmpty(writer: SerializationWriter, empty: Partial<Empty> | undefined | null = {}) : void {
    if (empty) {
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEvent(writer: SerializationWriter, event: Partial<Event> | undefined | null = {}) : void {
    if (event) {
        writer.writeBooleanValue("active", event.active);
        writer.writeCollectionOfObjectValues<AttendeeSimple>("attendees", event.attendees, serializeAttendeeSimple);
        writer.writeStringValue("badgeImage", event.badgeImage);
        writer.writeStringValue("description", event.description);
        writer.writeStringValue("endDateTime", event.endDateTime);
        writer.writeStringValue("id", event.id);
        writer.writeStringValue("location", event.location);
        writer.writeStringValue("name", event.name);
        writer.writeStringValue("startDateTime", event.startDateTime);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeEventSimple(writer: SerializationWriter, eventSimple: Partial<EventSimple> | undefined | null = {}) : void {
    if (eventSimple) {
        writer.writeBooleanValue("active", eventSimple.active);
        writer.writeStringValue("badgeImage", eventSimple.badgeImage);
        writer.writeStringValue("description", eventSimple.description);
        writer.writeStringValue("endDateTime", eventSimple.endDateTime);
        writer.writeStringValue("id", eventSimple.id);
        writer.writeStringValue("location", eventSimple.location);
        writer.writeStringValue("name", eventSimple.name);
        writer.writeStringValue("startDateTime", eventSimple.startDateTime);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeGuestCheckIn(writer: SerializationWriter, guestCheckIn: Partial<GuestCheckIn> | undefined | null = {}) : void {
    if (guestCheckIn) {
        writer.writeStringValue("name", guestCheckIn.name);
        writer.writeStringValue("nric", guestCheckIn.nric);
        writer.writeStringValue("phone", guestCheckIn.phone);
        writer.writeStringValue("reason", guestCheckIn.reason);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListArticlesRequest(writer: SerializationWriter, listArticlesRequest: Partial<ListArticlesRequest> | undefined | null = {}) : void {
    if (listArticlesRequest) {
        writer.writeNumberValue("pageSize", listArticlesRequest.pageSize);
        writer.writeStringValue("pageToken", listArticlesRequest.pageToken);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListArticlesResponse(writer: SerializationWriter, listArticlesResponse: Partial<ListArticlesResponse> | undefined | null = {}) : void {
    if (listArticlesResponse) {
        writer.writeCollectionOfObjectValues<Article>("articles", listArticlesResponse.articles, serializeArticle);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListCheckInsResponse(writer: SerializationWriter, listCheckInsResponse: Partial<ListCheckInsResponse> | undefined | null = {}) : void {
    if (listCheckInsResponse) {
        writer.writeCollectionOfObjectValues<CheckIn>("checkIns", listCheckInsResponse.checkIns, serializeCheckIn);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListEventsResponse(writer: SerializationWriter, listEventsResponse: Partial<ListEventsResponse> | undefined | null = {}) : void {
    if (listEventsResponse) {
        writer.writeCollectionOfObjectValues<EventSimple>("events", listEventsResponse.events, serializeEventSimple);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeListUsersResponse(writer: SerializationWriter, listUsersResponse: Partial<ListUsersResponse> | undefined | null = {}) : void {
    if (listUsersResponse) {
        writer.writeCollectionOfObjectValues<User>("users", listUsersResponse.users, serializeUser);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeMember(writer: SerializationWriter, member: Partial<Member> | undefined | null = {}) : void {
    if (member) {
        writer.writeObjectValue<AlumniMember>("alumniMember", member.alumniMember, serializeAlumniMember);
        writer.writeObjectValue<EmployeeMember>("employeeMember", member.employeeMember, serializeEmployeeMember);
        writer.writeStringValue("memberId", member.memberId);
        writer.writeEnumValue<Membership>("membership", member.membership);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeServiceAccount(writer: SerializationWriter, serviceAccount: Partial<ServiceAccount> | undefined | null = {}) : void {
    if (serviceAccount) {
        writer.writeEnumValue<ServiceAccountType>("serviceAccountType", serviceAccount.serviceAccountType);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeStatus(writer: SerializationWriter, status: Partial<Status> | undefined | null = {}) : void {
    if (status) {
        writer.writeNumberValue("code", status.code);
        writer.writeCollectionOfObjectValues<Any>("details", status.details, serializeAny);
        writer.writeStringValue("message", status.messageEscaped);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeSystemAdmin(writer: SerializationWriter, systemAdmin: Partial<SystemAdmin> | undefined | null = {}) : void {
    if (systemAdmin) {
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateEventRequest(writer: SerializationWriter, updateEventRequest: Partial<UpdateEventRequest> | undefined | null = {}) : void {
    if (updateEventRequest) {
        writer.writeObjectValue<EventSimple>("event", updateEventRequest.event, serializeEventSimple);
        writer.writeStringValue("id", updateEventRequest.id);
        writer.writeStringValue("updateMask", updateEventRequest.updateMask);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUpdateUserRequest(writer: SerializationWriter, updateUserRequest: Partial<UpdateUserRequest> | undefined | null = {}) : void {
    if (updateUserRequest) {
        writer.writeStringValue("id", updateUserRequest.id);
        writer.writeStringValue("updateMask", updateUserRequest.updateMask);
        writer.writeObjectValue<User>("user", updateUserRequest.user, serializeUser);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeUser(writer: SerializationWriter, user: Partial<User> | undefined | null = {}) : void {
    if (user) {
        writer.writeStringValue("email", user.email);
        writer.writeObjectValue<Employee>("employee", user.employee, serializeEmployee);
        writer.writeStringValue("firebaseId", user.firebaseId);
        writer.writeStringValue("id", user.id);
        writer.writeObjectValue<Member>("member", user.member, serializeMember);
        writer.writeStringValue("name", user.name);
        writer.writeObjectValue<ServiceAccount>("serviceAccount", user.serviceAccount, serializeServiceAccount);
        writer.writeObjectValue<SystemAdmin>("systemAdmin", user.systemAdmin, serializeSystemAdmin);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVerifyUserRequest(writer: SerializationWriter, verifyUserRequest: Partial<VerifyUserRequest> | undefined | null = {}) : void {
    if (verifyUserRequest) {
        writer.writeStringValue("email", verifyUserRequest.email);
    }
}
/**
 * Serializes information the current object
 * @param writer Serialization writer to use to serialize this model
 */
// @ts-ignore
export function serializeVerifyUserResponse(writer: SerializationWriter, verifyUserResponse: Partial<VerifyUserResponse> | undefined | null = {}) : void {
    if (verifyUserResponse) {
        writer.writeStringValue("id", verifyUserResponse.id);
        writer.writeBooleanValue("linked", verifyUserResponse.linked);
    }
}
export interface ServiceAccount extends Parsable {
    /**
     * The serviceAccountType property
     */
    serviceAccountType?: ServiceAccountType | null;
}
export type ServiceAccountType = (typeof ServiceAccountTypeObject)[keyof typeof ServiceAccountTypeObject];
export interface Status extends ApiError, Parsable {
    /**
     * The code property
     */
    code?: number | null;
    /**
     * The details property
     */
    details?: Any[] | null;
    /**
     * The message property
     */
    messageEscaped?: string | null;
}
export interface SystemAdmin extends Parsable {
}
export interface UpdateEventRequest extends Parsable {
    /**
     * The event property
     */
    event?: EventSimple | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The updateMask property
     */
    updateMask?: string | null;
}
export interface UpdateUserRequest extends Parsable {
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The updateMask property
     */
    updateMask?: string | null;
    /**
     * The user property
     */
    user?: User | null;
}
export interface User extends Parsable {
    /**
     * The email property
     */
    email?: string | null;
    /**
     * The employee property
     */
    employee?: Employee | null;
    /**
     * The firebaseId property
     */
    firebaseId?: string | null;
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The member property
     */
    member?: Member | null;
    /**
     * The name property
     */
    name?: string | null;
    /**
     * The serviceAccount property
     */
    serviceAccount?: ServiceAccount | null;
    /**
     * The systemAdmin property
     */
    systemAdmin?: SystemAdmin | null;
}
export interface VerifyUserRequest extends Parsable {
    /**
     * The email property
     */
    email?: string | null;
}
export interface VerifyUserResponse extends Parsable {
    /**
     * The id property
     */
    id?: string | null;
    /**
     * The linked property
     */
    linked?: boolean | null;
}
export const MembershipObject = {
    Exco: "Exco",
    Associate: "Associate",
    Affiliate: "Affiliate",
    Ordinary: "Ordinary",
    Revoked: "Revoked",
} as const;
export const ServiceAccountTypeObject = {
    GuardHouse: "GuardHouse",
} as const;
/* tslint:enable */
/* eslint-enable */
