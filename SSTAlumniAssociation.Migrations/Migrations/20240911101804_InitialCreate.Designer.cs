// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SSTAlumniAssociation.Core.Context;

#nullable disable

namespace SSTAlumniAssociation.Migrations.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240911101804_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GroupMember", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MembersId")
                        .HasColumnType("uuid");

                    b.HasKey("GroupsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("GroupMember");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CtaTitle")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("CtaUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("HeroImageAlt")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("HeroImageUrl")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.Attendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AdmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("AdmittedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdmittedById");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Attendees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("66e832ab-e00e-48aa-ba66-cb62f5dab6c0"),
                            EventId = new Guid("535bb727-f3eb-4cb3-adcf-aef04f14e82a"),
                            UserId = new Guid("df90f5ea-a236-413f-a6c1-ca9197427631")
                        },
                        new
                        {
                            Id = new Guid("21ace349-7df6-49af-a204-9581c6cf017b"),
                            EventId = new Guid("f2c84690-0311-4563-9635-ad0982cc1229"),
                            UserId = new Guid("df90f5ea-a236-413f-a6c1-ca9197427631")
                        });
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.CheckIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckInDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CheckOutDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ServiceAccountId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceAccountId");

                    b.ToTable("CheckIns");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("BadgeImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = new Guid("535bb727-f3eb-4cb3-adcf-aef04f14e82a"),
                            Active = true,
                            BadgeImage = "https://picsum.photos/200",
                            Description = "A very warm homecoming.",
                            EndDateTime = new DateTime(2024, 1, 13, 15, 0, 0, 0, DateTimeKind.Utc),
                            Location = "SST Multi-Purpose Hall",
                            Name = "Homecoming 2024",
                            StartDateTime = new DateTime(2024, 1, 13, 9, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("f2c84690-0311-4563-9635-ad0982cc1229"),
                            Active = false,
                            BadgeImage = "https://picsum.photos/200",
                            Description = "Class of 2014 Reunion",
                            EndDateTime = new DateTime(2024, 8, 17, 16, 0, 0, 0, DateTimeKind.Utc),
                            Location = "HIGHfive @ 40 Sam Leong Road",
                            Name = "Class of 2014 Reunion",
                            StartDateTime = new DateTime(2024, 8, 17, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.MembershipPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("BuiltIn")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("MembershipPlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ad2dfda-82df-4597-a76f-40e5fd4fd28d"),
                            BuiltIn = true,
                            Description = "SSTAA EXCO",
                            Duration = new TimeSpan(365, 0, 0, 0, 0),
                            Name = "EXCO",
                            Price = 0m
                        },
                        new
                        {
                            Id = new Guid("c28780c6-d687-4bb8-b9ce-5fbca1e347c2"),
                            BuiltIn = true,
                            Description = "All past/present staff and students who completed at least 1 year of study in SST but did not graduate",
                            Duration = new TimeSpan(365, 0, 0, 0, 0),
                            Name = "Associate",
                            Price = 0m
                        },
                        new
                        {
                            Id = new Guid("d258488b-c5a3-4f96-add7-366be4934900"),
                            BuiltIn = true,
                            Description = "All graduated alumni who are under 21",
                            Duration = new TimeSpan(365, 0, 0, 0, 0),
                            Name = "Affiliate",
                            Price = 0m
                        },
                        new
                        {
                            Id = new Guid("c1869b12-56a9-4ed8-96d2-ef962c39799e"),
                            BuiltIn = true,
                            Description = "Ordinary",
                            Duration = new TimeSpan(365, 0, 0, 0, 0),
                            Name = "Ordinary",
                            Price = 0m
                        });
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.MembershipSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MembershipPlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentIntentState")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("MembershipPlanId");

                    b.ToTable("MembershipSubscriptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58352738-955f-41b5-ae42-57c2e01d7452"),
                            EndDateTime = new DateTime(2024, 12, 31, 16, 0, 0, 0, DateTimeKind.Utc),
                            MemberId = new Guid("df90f5ea-a236-413f-a6c1-ca9197427631"),
                            MembershipPlanId = new Guid("7ad2dfda-82df-4597-a76f-40e5fd4fd28d"),
                            StartDateTime = new DateTime(2023, 12, 31, 16, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = new Guid("d44eba3b-5556-4978-8188-7440762b1288"),
                            EndDateTime = new DateTime(2024, 12, 31, 16, 0, 0, 0, DateTimeKind.Utc),
                            MemberId = new Guid("829bc4dc-2d8f-46df-acbb-c52c0e7f958f"),
                            MembershipPlanId = new Guid("7ad2dfda-82df-4597-a76f-40e5fd4fd28d"),
                            StartDateTime = new DateTime(2023, 12, 31, 16, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.MembershipSubscriptionPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("IntentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IntentState")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("MembershipSubscriptionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Processor")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MembershipSubscriptionId");

                    b.ToTable("MembershipSubscriptionPayment");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirebaseId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FirebaseId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.GuestCheckIn", b =>
                {
                    b.HasBaseType("SSTAlumniAssociation.Core.Entities.CheckIn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nric")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("GuestCheckIns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e15ae42b-b986-4fc6-b116-e7db6b213339"),
                            CheckInDateTime = new DateTime(2024, 8, 17, 10, 30, 0, 0, DateTimeKind.Utc),
                            ServiceAccountId = new Guid("a78a112f-3355-499e-aafd-824c14858b34"),
                            Name = "Alex",
                            Nric = "999B",
                            Phone = "9999 9999",
                            Reason = "Alex is bored"
                        });
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.UserCheckIn", b =>
                {
                    b.HasBaseType("SSTAlumniAssociation.Core.Entities.CheckIn");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("UserId");

                    b.ToTable("UserCheckIns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d96a21d0-81dc-4d65-aa7a-020af478a849"),
                            CheckInDateTime = new DateTime(2024, 8, 17, 10, 15, 0, 0, DateTimeKind.Utc),
                            ServiceAccountId = new Guid("a78a112f-3355-499e-aafd-824c14858b34"),
                            UserId = new Guid("df90f5ea-a236-413f-a6c1-ca9197427631")
                        },
                        new
                        {
                            Id = new Guid("4f770e07-4f69-402d-9b1a-5e26e7f822f2"),
                            CheckInDateTime = new DateTime(2024, 8, 17, 10, 20, 0, 0, DateTimeKind.Utc),
                            ServiceAccountId = new Guid("a78a112f-3355-499e-aafd-824c14858b34"),
                            UserId = new Guid("829bc4dc-2d8f-46df-acbb-c52c0e7f958f")
                        });
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.Employee", b =>
                {
                    b.HasBaseType("SSTAlumniAssociation.Core.Entities.User");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.Member", b =>
                {
                    b.HasBaseType("SSTAlumniAssociation.Core.Entities.User");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.ServiceAccount", b =>
                {
                    b.HasBaseType("SSTAlumniAssociation.Core.Entities.User");

                    b.Property<string>("ServiceAccountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("ServiceAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a78a112f-3355-499e-aafd-824c14858b34"),
                            Email = "guardhouse+laptop@sstaa.org",
                            FirebaseId = "EGjzDDZgHxXd80aGUYkeoP5fNnC2",
                            Name = "Guard House Laptop",
                            ServiceAccountType = "GuardHouse"
                        });
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.SystemAdmin", b =>
                {
                    b.HasBaseType("SSTAlumniAssociation.Core.Entities.User");

                    b.ToTable("SystemAdmins");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.AlumniMember", b =>
                {
                    b.HasBaseType("SSTAlumniAssociation.Core.Entities.Member");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("integer");

                    b.ToTable("AlumniMembers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("df90f5ea-a236-413f-a6c1-ca9197427631"),
                            Email = "qinguan20040914@gmail.com",
                            FirebaseId = "GuZZVeOdlhNsf5dZGQmU2yV1Ox33",
                            Name = "Qin Guan",
                            MemberId = "EXCO-1",
                            GraduationYear = 2000
                        },
                        new
                        {
                            Id = new Guid("829bc4dc-2d8f-46df-acbb-c52c0e7f958f"),
                            Email = "tan_zheng_jie@sstaa.org",
                            FirebaseId = "5ZPERFPTvfMfxwhH7SGsOmXqSco2",
                            Name = "Tan Zheng Jie",
                            MemberId = "EXCO-2"
                        });
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.EmployeeMember", b =>
                {
                    b.HasBaseType("SSTAlumniAssociation.Core.Entities.Member");

                    b.Property<int?>("GraduationYear")
                        .HasColumnType("integer");

                    b.ToTable("EmployeeMembers");
                });

            modelBuilder.Entity("GroupMember", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSTAlumniAssociation.Core.Entities.Member", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.Attendee", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.ServiceAccount", "AdmittedBy")
                        .WithMany("AttendeesAdmitted")
                        .HasForeignKey("AdmittedById");

                    b.HasOne("SSTAlumniAssociation.Core.Entities.Event", "Event")
                        .WithMany("Attendees")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSTAlumniAssociation.Core.Entities.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdmittedBy");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.CheckIn", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.ServiceAccount", "ServiceAccount")
                        .WithMany()
                        .HasForeignKey("ServiceAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceAccount");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.Event", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.User", null)
                        .WithMany("Events")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.MembershipSubscription", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.Member", "Member")
                        .WithMany("Subscriptions")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSTAlumniAssociation.Core.Entities.MembershipPlan", "MembershipPlan")
                        .WithMany()
                        .HasForeignKey("MembershipPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("MembershipPlan");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.MembershipSubscriptionPayment", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.MembershipSubscription", "MembershipSubscription")
                        .WithMany("Payments")
                        .HasForeignKey("MembershipSubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MembershipSubscription");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.GuestCheckIn", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.CheckIn", null)
                        .WithOne()
                        .HasForeignKey("SSTAlumniAssociation.Core.Entities.GuestCheckIn", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.UserCheckIn", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.CheckIn", null)
                        .WithOne()
                        .HasForeignKey("SSTAlumniAssociation.Core.Entities.UserCheckIn", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSTAlumniAssociation.Core.Entities.User", "User")
                        .WithMany("CheckIns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.Employee", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("SSTAlumniAssociation.Core.Entities.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.Member", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("SSTAlumniAssociation.Core.Entities.Member", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.ServiceAccount", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("SSTAlumniAssociation.Core.Entities.ServiceAccount", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.SystemAdmin", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("SSTAlumniAssociation.Core.Entities.SystemAdmin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.AlumniMember", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.Member", null)
                        .WithOne()
                        .HasForeignKey("SSTAlumniAssociation.Core.Entities.AlumniMember", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.EmployeeMember", b =>
                {
                    b.HasOne("SSTAlumniAssociation.Core.Entities.Member", null)
                        .WithOne()
                        .HasForeignKey("SSTAlumniAssociation.Core.Entities.EmployeeMember", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.Event", b =>
                {
                    b.Navigation("Attendees");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.MembershipSubscription", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.User", b =>
                {
                    b.Navigation("CheckIns");

                    b.Navigation("Events");

                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.Member", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("SSTAlumniAssociation.Core.Entities.ServiceAccount", b =>
                {
                    b.Navigation("AttendeesAdmitted");
                });
#pragma warning restore 612, 618
        }
    }
}
