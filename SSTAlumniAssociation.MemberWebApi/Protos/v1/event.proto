syntax = "proto3";

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "Protos/google/api/annotations.proto";

import "Protos/v1/user.proto";

package protos.events.v1;

message Event {
  string id = 1;
  string name = 2;
  string description = 3;
  string location = 4;
  string badgeImage = 5;
  bool active = 6;
  google.protobuf.Timestamp start_date_time = 7;
  google.protobuf.Timestamp end_date_time = 8;
}

message Attendee {
  string id = 1;
  string admission_key = 2;
  protos.user.v1.User user = 3;
}

// Event service
service Events {
  // List all events. This will only list events which are marked as active.
  rpc ListEvents (ListEventsRequest) returns (ListEventsResponse) {
    option (google.api.http) = {
      get: "/v1/events"
    };
  }

  // Get an event. This will not include the attendees of the event.
  // It will also return 404 if the event is marked as not active.
  rpc GetEvent (GetEventRequest) returns (Event) {
    option (google.api.http) = {
      get: "/v1/events/{id}"
    };
  }

  // Get an events attendees
  rpc ListEventAttendees (ListEventAttendeesRequest) returns (ListEventAttendeesResponse) {
    option (google.api.http) = {
      get: "/v1/events/{id}/attendees"
    };
  }

  // Admit event attendee
  rpc AdmitEventAttendee (AdmitEventAttendeeRequest) returns (Attendee) {
    option (google.api.http) = {
      post: "/v1/events/{id}/attendees/{attendeeId}"
    };
  }
}

message ListEventsRequest {
  int32 page_size = 1;
  string page_token = 2;
}

message ListEventsResponse {
  repeated Event events = 1;
}

message GetEventRequest {
  string id = 1;
}

message ListEventAttendeesRequest {
  string id = 1;
}

message ListEventAttendeesResponse {
  repeated Attendee attendees = 1;
}

message AdmitEventAttendeeRequest {
  string id = 1;
  string attendeeId = 2;
}
